
import com.sun.xml.internal.ws.util.StringUtils;
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Den
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    ArrayList<dependencia> dep;
    ArrayList<String> deter;
    ArrayList<String> depen;

    public Principal() {
        initComponents();
        dep = new ArrayList<dependencia>();
        deter = new ArrayList<String>();
        depen = new ArrayList<String>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialog_claves = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtext_relacion = new javax.swing.JTextField();
        button_insertarrelacion = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        combobox_atributos = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jtext_determina = new javax.swing.JTextField();
        jtext_depende = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        combobox_dependencias = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        label_errores = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        combobox_clavescandidatas = new javax.swing.JComboBox();
        dialog_normalizar = new javax.swing.JDialog();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jtext_relacion_nor = new javax.swing.JTextField();
        button_insertarrelacion_nor = new javax.swing.JButton();
        label1 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jtext_determina_nor = new javax.swing.JTextField();
        label_errores_nor = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jtext_depende_nor = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        combobox_dependencias_nor = new javax.swing.JComboBox();
        jButton6 = new javax.swing.JButton();
        combobox_atributos_nor = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        jtext_claveprimaria = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea_nf2 = new javax.swing.JTextArea();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textarea_nf1 = new javax.swing.JTextArea();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textarea_nf3 = new javax.swing.JTextArea();
        jLabel28 = new javax.swing.JLabel();
        jtext_multi = new javax.swing.JTextField();
        cleaner = new javax.swing.JButton();
        label2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        button_clavescandidatas = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        dialog_claves.setBounds(new java.awt.Rectangle(1, 1, 700, 600));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Claves Candidatas");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Introduzca la relación \" R\"");

        button_insertarrelacion.setText("Insertar");
        button_insertarrelacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_insertarrelacionActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("R=");

        jLabel7.setText("Ejemplo:  AY -> BCD");

        label.setForeground(new java.awt.Color(255, 51, 51));
        label.setText("....E");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Lista de atributos:");

        combobox_atributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_atributosActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Agregar Dependencias Funcionales");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("->");

        jButton2.setText("Agregar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel10.setText(" Separando los atriburos por comas y representarlos por una única letra mayúscula. Ejemplo: A,B,C,D,Y...");

        label_errores.setForeground(new java.awt.Color(255, 51, 51));
        label_errores.setText("....E");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Dependiente");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Determina");

        jButton4.setText("Calcular claves candidatas");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialog_clavesLayout = new javax.swing.GroupLayout(dialog_claves.getContentPane());
        dialog_claves.getContentPane().setLayout(dialog_clavesLayout);
        dialog_clavesLayout.setHorizontalGroup(
            dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_clavesLayout.createSequentialGroup()
                .addGroup(dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jtext_relacion, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(button_insertarrelacion, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(combobox_atributos, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dialog_clavesLayout.createSequentialGroup()
                                .addGap(130, 130, 130)
                                .addComponent(label_errores, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(160, 160, 160)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jtext_determina, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jtext_depende, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(combobox_dependencias, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(combobox_clavescandidatas, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        dialog_clavesLayout.setVerticalGroup(
            dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_clavesLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtext_relacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_insertarrelacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combobox_atributos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_errores, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtext_determina, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtext_depende, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combobox_dependencias, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(dialog_clavesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dialog_clavesLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(combobox_clavescandidatas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        dialog_normalizar.setBounds(new java.awt.Rectangle(1, 1, 700, 700));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Normalización");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Introduzca la relación R:");

        jLabel15.setText(" Separando los atriburos por comas y representarlos por una única letra mayúscula. Ejemplo: A,B,C,D,Y...");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setText("R=");

        button_insertarrelacion_nor.setText("Agregar");
        button_insertarrelacion_nor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_insertarrelacion_norActionPerformed(evt);
            }
        });

        label1.setForeground(new java.awt.Color(255, 51, 51));
        label1.setText("....E");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Lista de atributos:");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Agregar Dependencias Funcionales");

        jLabel19.setText("Ejemplo:  AY -> BCD");

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Determina");

        label_errores_nor.setForeground(new java.awt.Color(255, 51, 51));
        label_errores_nor.setText("....E");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("->");

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Dependiente");

        jButton5.setText("Agregar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Eliminar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        combobox_atributos_nor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_atributos_norActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel23.setText("Clave primaria:");

        jtext_claveprimaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtext_claveprimariaActionPerformed(evt);
            }
        });

        jButton7.setText("Normalizar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        textarea_nf2.setColumns(20);
        textarea_nf2.setRows(5);
        jScrollPane1.setViewportView(textarea_nf2);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("Tercera Forma Normal");

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Primera Forma Normal");

        textarea_nf1.setColumns(20);
        textarea_nf1.setRows(5);
        jScrollPane2.setViewportView(textarea_nf1);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Segunda Forma Normal");

        textarea_nf3.setColumns(20);
        textarea_nf3.setRows(5);
        jScrollPane3.setViewportView(textarea_nf3);

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel28.setText("Atributos Multievaluados");

        cleaner.setText("Limpiar Datos");
        cleaner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanerActionPerformed(evt);
            }
        });

        label2.setForeground(new java.awt.Color(255, 51, 51));
        label2.setText("....E");

        javax.swing.GroupLayout dialog_normalizarLayout = new javax.swing.GroupLayout(dialog_normalizar.getContentPane());
        dialog_normalizar.getContentPane().setLayout(dialog_normalizarLayout);
        dialog_normalizarLayout.setHorizontalGroup(
            dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jtext_relacion_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(button_insertarrelacion_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_normalizarLayout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(combobox_atributos_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jtext_claveprimaria, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jtext_multi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_normalizarLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(label_errores_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jtext_determina_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jtext_depende_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(combobox_dependencias_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cleaner, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        dialog_normalizarLayout.setVerticalGroup(
            dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_normalizarLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtext_relacion_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_insertarrelacion_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combobox_atributos_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtext_claveprimaria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtext_multi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_errores_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtext_determina_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtext_depende_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combobox_dependencias_nor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(dialog_normalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_normalizarLayout.createSequentialGroup()
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(cleaner, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 255));
        setForeground(new java.awt.Color(102, 0, 255));

        jLabel1.setBackground(new java.awt.Color(153, 153, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Normalización");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        button_clavescandidatas.setText("Claves candidatas");
        button_clavescandidatas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_clavescandidatasActionPerformed(evt);
            }
        });

        jButton1.setText("1FN, 2FN, 3FN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Proyecto de Teoria de Base de Datos II");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(120, 120, 120)
                            .addComponent(button_clavescandidatas, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(120, 120, 120)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(70, 70, 70)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(button_clavescandidatas, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_clavescandidatasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_clavescandidatasActionPerformed
        // TODO add your handling code here:
        this.dialog_claves.setModal(true);
        this.dialog_claves.setVisible(true);
    }//GEN-LAST:event_button_clavescandidatasActionPerformed

    private void button_insertarrelacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_insertarrelacionActionPerformed
        // TODO add your handling code here:
        while (this.combobox_atributos.getItemCount() > 0) {
            this.combobox_atributos.removeItemAt(0);
        }
        while (this.combobox_dependencias.getItemCount() > 0) {
            this.combobox_dependencias.removeItemAt(0);
        }
        while (this.combobox_clavescandidatas.getItemCount() > 0) {
            this.combobox_clavescandidatas.removeItemAt(0);
        }
        this.jtext_depende.setText("");
        this.jtext_determina.setText("");
        this.label.setText("...");
        String relacion = this.jtext_relacion.getText().toUpperCase();
        String[] atributos = relacion.split(",");
        boolean correcto = true;
        for (int i = 0; i < atributos.length; i++) {
            if (!(atributos[i].length() == 1 && Character.isLetter(atributos[i].charAt(0)))) {
                this.label.setText("Solamente utilize una letra para cada atributo");
                correcto = false;
                break;
            }
        }
        for (int i = 0; i < atributos.length; i++) {
            for (int j = i + 1; j < atributos.length; j++) {
                if (atributos[i].equals(atributos[j])) {
                    this.label.setText("No se pueden repetir letras para los atributos");
                    correcto = false;
                    break;
                }
            }
        }

        if (correcto) {
            for (int i = 0; i < atributos.length; i++) {
                this.combobox_atributos.addItem(atributos[i]);
            }
        }

    }//GEN-LAST:event_button_insertarrelacionActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        while (this.combobox_clavescandidatas.getItemCount() > 0) {
            this.combobox_clavescandidatas.removeItemAt(0);
        }
        if (this.combobox_atributos.getItemCount() > 0) {
            this.label_errores.setText("...");
            String determina = this.jtext_determina.getText().toUpperCase();
            String depende = this.jtext_depende.getText().toUpperCase();
            boolean correcto = true;
            for (int i = 0; i < determina.length(); i++) {
                if (!(Character.isLetter(determina.charAt(i)))) {
                    this.label_errores.setText("Ingrese atributos válidos");
                    correcto = false;
                    break;
                }
            }
            for (int i = 0; i < depende.length(); i++) {
                if (!(Character.isLetter(depende.charAt(i)))) {
                    this.label_errores.setText("Ingrese atributos válidos");
                    correcto = false;
                    break;
                }
            }
            int contar = 0;
            for (int i = 0; i < determina.length(); i++) {
                contar = 0;
                for (int j = 0; j < this.combobox_atributos.getItemCount(); j++) {
                    if (determina.charAt(i) == (this.combobox_atributos.getItemAt(j).toString().charAt(0))) {
                        contar++;
                        j = this.combobox_atributos.getItemCount();

                    }
                }
                if (contar == 0) {
                    correcto = false;
                    this.label_errores.setText("Ingrese atributos válidos");
                    break;
                }
            }
            for (int i = 0; i < depende.length(); i++) {
                contar = 0;
                for (int j = 0; j < this.combobox_atributos.getItemCount(); j++) {
                    if (depende.charAt(i) == (this.combobox_atributos.getItemAt(j).toString().charAt(0))) {
                        contar++;
                        j = this.combobox_atributos.getItemCount();
                    }
                }
                if (contar == 0) {
                    correcto = false;
                    this.label_errores.setText("Ingrese atributos válidos");
                    break;
                }
            }
            if (correcto) {
                this.combobox_dependencias.addItem(determina + "->" + depende);
            }

        }
        this.jtext_depende.setText("");
        this.jtext_determina.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (this.combobox_dependencias.getItemCount() > 0) {
            this.combobox_dependencias.removeItemAt(this.combobox_dependencias.getSelectedIndex());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        ///////////////////////////////////////////////////////////////////////Limpiando campos
        while (this.combobox_clavescandidatas.getItemCount() > 0) {
            this.combobox_clavescandidatas.removeItemAt(0);
        }
        ArrayList dependencias = new ArrayList();
        ArrayList atributos = new ArrayList();
        for (int i = 0; i < this.combobox_atributos.getItemCount(); i++) {
            atributos.add(this.combobox_atributos.getItemAt(i).toString());
        }
        for (int i = 0; i < this.combobox_dependencias.getItemCount(); i++) {
            dependencias.add(this.combobox_dependencias.getItemAt(i).toString());
        }

        ArrayList clavescandidatas = MetodoClaves(dependencias, atributos);
        System.out.println(clavescandidatas);
        for (int i = 0; i < clavescandidatas.size(); i++) {
            this.combobox_clavescandidatas.addItem(clavescandidatas.get(i));
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dialog_normalizar.setModal(true);
        this.dialog_normalizar.setVisible(true);
        dep.clear();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void button_insertarrelacion_norActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_insertarrelacion_norActionPerformed
        this.label1.setText("...");
        String relacion = this.jtext_relacion_nor.getText().toUpperCase();
        String[] atributos = relacion.split(",");
        boolean correcto = true;
        for (int i = 0; i < atributos.length; i++) {
            if (!(atributos[i].length() == 1 && Character.isLetter(atributos[i].charAt(0)))) {
                this.label1.setText("Solamente utilize una letra para cada atributo");
                correcto = false;
                break;
            }//fin del if
        }//fin del for
        for (int i = 0; i < atributos.length; i++) {
            for (int j = i + 1; j < atributos.length; j++) {
                if (atributos[i].equals(atributos[j])) {
                    this.label1.setText("No se pueden repetir letras para los atributos");
                    correcto = false;
                    break;
                }//fin del if
            }//fin del for
        }//fin del for

        if (correcto) {
            for (int i = 0; i < atributos.length; i++) {
                this.combobox_atributos_nor.addItem(atributos[i]);
            }
        }
        this.jtext_relacion_nor.setText("");
    }//GEN-LAST:event_button_insertarrelacion_norActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if ((!(this.combobox_atributos_nor.getItemCount() == 0))) {
            this.label_errores_nor.setText("...");
            String determina = this.jtext_determina_nor.getText().toUpperCase();
            String depende = this.jtext_depende_nor.getText().toUpperCase();
            boolean correcto = true;
            for (int i = 0; i < determina.length(); i++) {
                if (!(Character.isLetter(determina.charAt(i)))) {
                    this.label_errores_nor.setText("Ingrese atributos válidos");
                    correcto = false;
                    break;
                }
            }
            for (int i = 0; i < depende.length(); i++) {
                if (!(Character.isLetter(depende.charAt(i)))) {
                    this.label_errores_nor.setText("Ingrese atributos válidos");
                    correcto = false;
                    break;
                }
            }
            int contar = 0;
            for (int i = 0; i < determina.length(); i++) {
                contar = 0;
                for (int j = 0; j < this.combobox_atributos_nor.getItemCount(); j++) {
                    if (determina.charAt(i) == (this.combobox_atributos_nor.getItemAt(j).toString().charAt(0))) {
                        contar++;
                        j = this.combobox_atributos_nor.getItemCount();

                    }
                }

                if (contar == 0) {
                    correcto = false;
                    this.label_errores_nor.setText("Ingrese atributos válidos");
                    break;
                }
            }
            for (int i = 0; i < depende.length(); i++) {
                contar = 0;
                for (int j = 0; j < this.combobox_atributos_nor.getItemCount(); j++) {
                    if (depende.charAt(i) == (this.combobox_atributos_nor.getItemAt(j).toString().charAt(0))) {
                        contar++;
                        j = this.combobox_atributos_nor.getItemCount();
                    }
                }
                if (contar == 0) {
                    correcto = false;
                    this.label_errores_nor.setText("Ingrese atributos válidos");
                    break;
                }
            }
            if (correcto) {
                this.combobox_dependencias_nor.addItem(determina + "->" + depende);

                deter.add(determina);
                depen.add(depende);
            }//fin del if

        }
        this.jtext_depende_nor.setText("");
        this.jtext_determina_nor.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if (this.combobox_dependencias_nor.getItemCount() > 0) {
            this.combobox_dependencias_nor.removeItemAt(this.combobox_dependencias_nor.getSelectedIndex());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void combobox_atributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_atributosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combobox_atributosActionPerformed

    private void combobox_atributos_norActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_atributos_norActionPerformed
    }//GEN-LAST:event_combobox_atributos_norActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        this.label2.setText("...");
        String clavep = this.jtext_claveprimaria.getText().toUpperCase();
        String multi = this.jtext_multi.getText().toUpperCase();
        ArrayList dependencias = new ArrayList();
        ArrayList atributos = new ArrayList();

        if (clavep.equals("")) {
            this.label2.setText("No ha ingresado la clave primaria");
        } else {
            if (this.combobox_dependencias_nor.getItemCount() > 0) {
                if (verificar()) {//////////////////verificar si la clave y multivaluado tienen tributos de la lista
                    //////////////////////////////////////////////// verificar si la clave primaria esta correcta
                    for (int i = 0; i < this.combobox_atributos_nor.getItemCount(); i++) {
                        atributos.add(this.combobox_atributos_nor.getItemAt(i).toString());
                    }
                    for (int i = 0; i < this.combobox_dependencias_nor.getItemCount(); i++) {
                        dependencias.add(this.combobox_dependencias_nor.getItemAt(i).toString());
                    }

                    ArrayList clavescandidatas = MetodoClaves(dependencias, atributos);
                    boolean encontroclave = verificarClave(clavescandidatas);
                    if (!encontroclave) {
                        this.label2.setText("La clave ingresada es incorrecta para las dependencias");
                    } else {////////////////////////////////////La clave esta correcta
                        ArrayList lineas = new ArrayList();
                        if (!(multi.equals(""))) {
                            ArrayList atrimul = new ArrayList();
                            ArrayList quitaratributos = atributos;
                            String lin = "";
                            for (int l = 0; l < multi.length(); l++) {
                                lin = "";
                                lin += clavep + multi.charAt(l);
                                lineas.add(lin);
                                quitaratributos.remove(Character.toString(multi.charAt(l)));
                            }
                            lin = "";
                            for (int b = 0; b < quitaratributos.size(); b++) {
                                lin += quitaratributos.get(b).toString();
                            }
                            lineas.add(0, lin);
                            imprimirnf1(lineas, clavep);
                        } else {
                            String lin = "";
                            for (int b = 0; b < this.combobox_atributos_nor.getItemCount(); b++) {
                                lin += this.combobox_atributos_nor.getItemAt(b).toString();
                            }
                            lineas.add(lin);
                            imprimirnf1(lineas, clavep);
                        }
                    }
                    /////////////////////////////////////////////////////////////////////////termina de verificar clave primaria
                }
            }
        }
        //begin
        SNF();

    }//GEN-LAST:event_jButton7ActionPerformed

    public boolean chequar(String key, String det) {
        boolean ret = true;
        for (int i = 0; i < det.length(); i++) {
            if (key.contains(det.charAt(i) + "") == false) {
                ret = false;
            }//fin del if
        }//fin del for
        return ret;
    }

    public ArrayList<Integer> IndexFinder(ArrayList<dependencia> x, dependencia y) {
        ArrayList<Integer> ret = new ArrayList<Integer>();
        for (int i = 0; i < x.size(); i++) {
            if (x.get(i).getDeterminante() == null ? y.getDeterminante() == null : x.get(i).getDeterminante().equals(y.getDeterminante())) {
                ret.add(i);
            }//fin del if
        }//fin del for
        return ret;
    }

    public String KeyFinder(String relacion) {
        String ret = "";
        for (int i = 0; i < relacion.length(); i++) {
            int x = relacion.charAt(i);
            if (x >= 40 || x <= 90) {
                ret += relacion.charAt(i) + "";
            }//fin del if
        }

        return ret;
    }//fin del metodo

    public void SNF() {
        String[] split = this.textarea_nf1.getText().split("\n");
        for (int i = 0; i < split.length; i++) {
            System.out.println(split[i]);
        }
        String clave = "";
        ArrayList<String> deterCo = new ArrayList();
        ArrayList<String> depenCo = new ArrayList();
        ArrayList<String> print = new ArrayList();

        for (int i = 0; i < deter.size(); i++) {
            System.out.println(deter.get(i));
        }

        for (int i = 0; i < split.length; i++) {
            

            for (int i2 = 0; i2 < depen.size(); i2++) {
                depenCo.add(depen.get(i2).toLowerCase());
            }
            for (int i2 = 0; i2 < deter.size(); i2++) {
                deterCo.add(deter.get(i2).toLowerCase());
            }
               System.out.println("");
            clave = "";
            for (int i2 = 0; i2 < split[i].length(); i2++) {
                int g = split[i].charAt(i2);
                if (g >= 65 && g <= 90) {
                    clave += split[i].charAt(i2) + "";
                }//fin del if
            }//fin del for

            split[i] = split[i].toLowerCase();
            clave = clave.toLowerCase();
            for (int i2 = 0; i2 < deterCo.size(); i2++) {
                int bandera = 0;

                for (int i3 = 0; i3 < deterCo.get(i2).length(); i3++) {
                    if (split[i].contains(deterCo.get(i2).charAt(i3) + "")) {

                        bandera++;
                        System.out.println(deterCo.get(i2) + " " + bandera);
                    }//fin del if
                }//fin del for

                if (bandera == deterCo.get(i2).length()) {
                    bandera = 0;
                    for (int i3 = 0; i3 < depenCo.get(i2).length(); i3++) {
                        if (split[i].contains(depenCo.get(i2).charAt(i3) + "")) {

                            bandera++;
                        }//fin del if
                    }//fin del for

                    if (bandera != depenCo.get(i2).length()) {
                        deterCo.remove(i2);
                        depenCo.remove(i2);

                        i2--;

                    }//fin del if   



                }//fin del if
                else {
                    System.out.println("entro2");
                    deterCo.remove(i2);
                    depenCo.remove(i2);
                    i2--;
                }
            }//fin del for
            System.out.println("");
            System.out.println("imprimir deterCo");
            System.out.println(deterCo);
            System.out.println(depenCo);
            for (int i2 = 0; i2 < deterCo.size(); i2++) {
            }

            ArrayList<String> relations = new ArrayList();
            ArrayList<String> contiene;
            for (int i2 = 0; i2 < deterCo.size(); i2++) {
                int flag = 0;
                contiene = new ArrayList<String>();
                for (int i3 = 0; i3 < clave.length(); i3++) {
                    if (deterCo.get(i2).contains(clave.charAt(i3) + "")) {
                        flag++;
                        contiene.add((clave.charAt(i3) + "").toUpperCase());
                        System.out.println("clave " + (clave.charAt(i3) + "").toUpperCase());
                        System.out.println("deter" + deterCo.get(i));
                    }//fin del if
                }//fin del for
                if (flag != 0 && flag != clave.length()) {
                    String imp = contiene.get(0);
                    for (int i3 = 1; i3 < contiene.size(); i3++) {
                        imp += "," + contiene.get(i3);
                    }//fin del for

                    for (int i6 = 0; i6 < depenCo.get(i2).length(); i6++) {

                        if (clave.contains(depenCo.get(i2).charAt(i6) + "") == false) {

                            split[i] = split[i].replace(depenCo.get(i2).charAt(i6) + "", "");
                            imp += "," + depenCo.get(i2).charAt(i6);
                        }

                    }
                    relations.add("(" + imp + ")");
                }//fin del if
            }//fin del for
            for (int i2 = 0; i2 < split[i].length(); i2++) {
                if (clave.contains(split[i].charAt(i2) + "")) {
                    int y = split[i].charAt(i2);
                    char r = Character.toUpperCase(split[i].charAt(i2));
                    split[i] = split[i].replace(split[i].charAt(i2), r);
                }
            }
            print.add(split[i]);
            for (int i2 = 0; i2 < relations.size(); i2++) {
                print.add(relations.get(i2));
            }//fin del for
            depenCo.clear();
            deterCo.clear();
        }//fin del for principal
        for (int i = 0; i < print.size(); i++) {
            this.textarea_nf2.setText(this.textarea_nf2.getText() + print.get(i)+"\n");
            System.out.println(print.get(i));
        }//fin del for



    }//fin del metodo

    public ArrayList<String> Extractor(ArrayList<dependencia> d) {
        ArrayList<String> ret = new ArrayList<String>();

        String tmp = "";
        for (int i = 0; i < d.size(); i++) {
            tmp = d.get(i).getDeterminante();
            if (ret.isEmpty()) {
                ret.add(tmp.charAt(0) + "");
            } else {
                for (int i2 = 0; i2 < tmp.length(); i2++) {
                    if (ret.contains(tmp.charAt(i2) + "") == false) {
                        ret.add(tmp.charAt(i2) + "");
                    }//fin del if
                }//fin del for
            }//fin del else
        }//fin del for

        for (int i = 0; i < d.size(); i++) {
            tmp = d.get(i).getDependiente();
            if (ret.isEmpty()) {
            } else {
                for (int i2 = 0; i2 < tmp.length(); i2++) {
                    if (ret.contains(tmp.charAt(i2) + "") == false) {
                        ret.add(tmp.charAt(i2) + "");
                    }//fin del if
                }//fin del for
            }//fin del else
        }//fin del for

        return ret;
    }//fin del metodo

    private void cleanerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanerActionPerformed
        this.textarea_nf1.setText("");
        this.textarea_nf2.setText("");
        this.textarea_nf3.setText("");
        while (this.combobox_atributos_nor.getItemCount() > 0) {
            this.combobox_atributos_nor.removeItemAt(0);
        }
        while (this.combobox_dependencias_nor.getItemCount() > 0) {
            this.combobox_dependencias_nor.removeItemAt(0);
        }
        this.jtext_claveprimaria.setText("");
        this.jtext_depende_nor.setText("");
        this.jtext_determina_nor.setText("");
        this.jtext_relacion_nor.setText("");
        this.jtext_multi.setText("");
        deter.clear();
        depen.clear();
    }//GEN-LAST:event_cleanerActionPerformed

    private void jtext_claveprimariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtext_claveprimariaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtext_claveprimariaActionPerformed
    /*
     IMPRIMIR NORMA NF1
     -------------------------------------------------
     ------------------------------------------------- 
     -------------------------------------------------
     */

    public void imprimirnf1(ArrayList lineas, String clavep) {
        String texto1 = "";
        for (int i = 0; i < lineas.size(); i++) {
            String texto = "(";
            for (int h = 0; h < lineas.get(i).toString().length(); h++) {
                if (!(clavep.contains(Character.toString(lineas.get(i).toString().charAt(h))))) {
                    texto += Character.toString(lineas.get(i).toString().charAt(h)).toLowerCase() + ",";
                } else {
                    texto += Character.toString(lineas.get(i).toString().charAt(h)) + ",";
                }
            }
            texto1 += texto.substring(0, texto.length() - 1) + ")\n";

        }
        this.textarea_nf1.setText(texto1);
    }

    /*
     METODO PARA VERIFICAR SI LA CLAVE ES CORRECTA
     -------------------------------------------------
     ------------------------------------------------- 
     -------------------------------------------------
     */
    public boolean verificarClave(ArrayList claves) {
        for (int i = 0; i < claves.size(); i++) {
            boolean comparar = true;
            if (claves.get(i).toString().length() == this.jtext_claveprimaria.getText().length()) {
                for (int j = 0; j < claves.get(i).toString().length(); j++) {
                    if (!(this.jtext_claveprimaria.getText().toUpperCase().contains(Character.toString(claves.get(i).toString().charAt(j))))) {
                        comparar = false;
                        j = claves.get(i).toString().length();
                    }
                }
                if (comparar) {
                    return true;
                }
            }
        }
        return false;

    }
    /*
     METODO PARA VERIFICAR CAMPOS CLAVE Y MULTIVALUADO
     -------------------------------------------------
     ------------------------------------------------- 
     -------------------------------------------------
     */

    public boolean verificar() {
        boolean correcto = true;
        int contar = 0;
        for (int i = 0; i < this.jtext_claveprimaria.getText().length(); i++) {
            contar = 0;
            for (int j = 0; j < this.combobox_atributos_nor.getItemCount(); j++) {
                if (this.jtext_claveprimaria.getText().toUpperCase().charAt(i) == (this.combobox_atributos_nor.getItemAt(j).toString().charAt(0))) {
                    contar++;
                }
            }
            if (contar == 0) {
                correcto = false;
                break;
            }
        }
        for (int i = 0; i < this.jtext_multi.getText().length(); i++) {
            contar = 0;
            for (int j = 0; j < this.combobox_atributos_nor.getItemCount(); j++) {
                if (this.jtext_multi.getText().toUpperCase().charAt(i) == (this.combobox_atributos_nor.getItemAt(j).toString().charAt(0))) {
                    contar++;
                }
            }
            if (contar == 0) {
                correcto = false;
                break;
            }
        }
        if (correcto) {
            return true;
        } else {
            this.label2.setText("Campo Clave o Multivaluado no contiene atributosa válidos");
            return false;
        }
    }////////////////////////////////////////Fin metodo verificar

    /*
     METODO PARA CLAVES CANDIDATAS
     -----------------------------
     -----------------------------   
     -----------------------------
     */
    public ArrayList MetodoClaves(ArrayList dependencias, ArrayList atributos) {///////////////////////////////////////
        ArrayList clavescandidatas = new ArrayList();
        if (dependencias.size() > 0) {
            ArrayList lista = new ArrayList();
            for (int i = 0; i < dependencias.size(); i++) {
                lista.add(dependencias.get(i).toString());
            }

            for (int w = 0; w < dependencias.size(); w++) {
                //////////////////////////////////////////////////for buscando todas las posibles llaves 
                ///////if reorganiza la lista con dependencia (mirar las dependencia desde otra perspectiva)
                if (w > 0) {
                    Object temp = lista.get(0);
                    Object temp2 = "";
                    for (int i = 0; i < lista.size(); i++) {
                        if (i == 0) {
                            lista.set(i, lista.get(lista.size() - 1));
                        } else {
                            lista.set(i, temp);
                            temp = temp2;

                        }
                        if (i < lista.size() - 1) {
                            temp2 = lista.get(i + 1);
                        }
                    }
                }

                ArrayList guardarcolas1 = new ArrayList();
                //////////////////////////////////////inicializando variables
                String clave1 = "";
                String clave2 = "";
                String clave3 = "";
                String cola1 = "";
                String cola2 = "";
                String cola3 = "";
                ArrayList determina = new ArrayList();
                ArrayList depende = new ArrayList();
                /////////////////////////////////////////////////////////dividiendo dependientes con los que determinan
                for (int i = 0; i < lista.size(); i++) {
                    String[] dividir = lista.get(i).toString().split("->");
                    determina.add(dividir[0]);
                    depende.add(dividir[1]);
                }
                clave1 = determina.get(0).toString();
                cola1 = depende.get(0).toString();
                for (int i = 1; i < lista.size(); i++) {
                    guardarcolas1.add(cola1);
                    ////////////////////////////////////////Comparar transitividad, depende con clave temporal
                    int contar = 0;
                    String contieneletras = "";
                    for (int j = 0; j < clave1.length(); j++) {
                        if (depende.get(i).toString().contains(Character.toString(clave1.charAt(j)))) {
                            contieneletras += clave1.charAt(j);
                            contar++;
                        }
                    }
                    if (contar > 0 && depende.get(i).toString().contains(contieneletras)) {
                        for (int j = 0; j < clave1.length(); j++) {
                            if (!(contieneletras.contains(Character.toString(clave1.charAt(j))))) {
                                clave2 += clave1.charAt(j);
                            }
                        }
                        clave2 += determina.get(i);
                    }
                    if (contar == 0 || !(depende.get(i).toString().contains(contieneletras))) {
                        clave2 = clave1 + determina.get(i);
                    }
                    cola2 = cola1 + depende.get(i);
                    ///////////////////////////////////////comparar transitividad determina con dependiente temporal
                    int contarletras = 0;
                    String letras = "";
                    for (int j = 0; j < cola1.length(); j++) {
                        if (determina.get(i).toString().contains(Character.toString(cola1.charAt(j)))) {
                            contarletras++;
                            letras += cola1.charAt(j);
                        }
                    }

                    if (contarletras > 1 && cola1.contains(letras)) {
                        boolean contiene = false;
                        int sizecolas1 = guardarcolas1.size();
                        if (sizecolas1 > 1) {
                            for (int j = 0; j < guardarcolas1.size() - 1; j++) {
                                if (guardarcolas1.get(j).toString().contains(letras)) {
                                    contiene = true;
                                    break;
                                }
                            }
                        } else {
                            contiene = true;
                        }
                        if (contiene) {
                            for (int l = 0; l < clave1.length(); l++) {
                                if (!(clave2.contains(Character.toString(clave1.charAt(l))))) {
                                    contiene = false;
                                    l = clave1.length();
                                }
                            }
                        }
                        if (contiene) {
                            String[] partes = clave2.split(letras);
                            for (int c = 0; c < partes.length; c++) {
                                clave3 += partes[c];
                            }
                        } else {
                            contarletras = 0;
                        }
                        cola3 = cola2;
                    }
                    if (contarletras == 1) {
                        for (int j = 0; j < cola1.length(); j++) {
                            for (int k = 0; k < determina.get(i).toString().length(); k++) {
                                if (determina.get(i).toString().charAt(k) == cola1.charAt(j)) {
                                    boolean contiene = true;
                                    for (int l = 0; l < clave1.length(); l++) {
                                        if (!(clave2.contains(Character.toString(clave1.charAt(l))))) {
                                            contiene = false;
                                            l = clave1.length();
                                        }
                                    }
                                    if (contiene) {
                                        for (int l = 0; l < clave2.length(); l++) {
                                            if (!(clave2.charAt(l) == cola1.charAt(j))) {
                                                clave3 += clave2.charAt(l);
                                            }
                                        }
                                        cola3 = cola2;
                                    } else {
                                        clave3 = clave2;
                                        for (int l = 0; l < cola2.length(); l++) {
                                            if (!(cola2.charAt(l) == cola1.charAt(j))) {
                                                cola3 += cola2.charAt(l);
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                    if (contarletras == 0) {
                        clave3 = clave2;
                        cola3 = cola2;
                    }
                    /////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\inicializar variables, establecer clave
                    clave2 = "";
                    clave1 = clave3;
                    cola1 = cola3;
                    clave3 = "";
                    cola3 = "";
                }
                String temporal = "";
                if (clave1.length() > 0) {
                    temporal = Character.toString(clave1.charAt(0));
                }
                for (int p = 1; p < clave1.length(); p++) {
                    if (!(temporal.contains(Character.toString(clave1.charAt(p))))) {
                        temporal += clave1.charAt(p);
                    }
                }
                ////////////////////////////////////Si algun atributo no esta en la dependencia lo agrega a la clave
                String letras = clave1 + cola1;
                for (int p = 1; p < atributos.size(); p++) {
                    if (!(letras.contains(Character.toString(atributos.get(p).toString().charAt(0))))) {
                        temporal += atributos.get(p).toString();
                    }
                }
                ///////////////////////////////////verificar si hay claves candidatas repetidas
                boolean repetida = false;
                for (int h = 0; h < clavescandidatas.size(); h++) {
                    int contiene = 0;
                    for (int x = 0; x < temporal.length(); x++) {
                        if (clavescandidatas.get(h).toString().contains(Character.toString(temporal.charAt(x)))) {
                            contiene++;
                        }
                    }

                    if (contiene == temporal.length()) {
                        repetida = true;
                        break;
                    }
                }
                ///////////////////////////////////////////////////agrega la clave candidata
                if (repetida == false) {
                    clavescandidatas.add(temporal);
                }


            }
        }
        return clavescandidatas;

    }///////////////////////////////Fin Metodo claves candidatas

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_clavescandidatas;
    private javax.swing.JButton button_insertarrelacion;
    private javax.swing.JButton button_insertarrelacion_nor;
    private javax.swing.JButton cleaner;
    private javax.swing.JComboBox combobox_atributos;
    private javax.swing.JComboBox combobox_atributos_nor;
    private javax.swing.JComboBox combobox_clavescandidatas;
    private javax.swing.JComboBox combobox_dependencias;
    private javax.swing.JComboBox combobox_dependencias_nor;
    private javax.swing.JDialog dialog_claves;
    private javax.swing.JDialog dialog_normalizar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jtext_claveprimaria;
    private javax.swing.JTextField jtext_depende;
    private javax.swing.JTextField jtext_depende_nor;
    private javax.swing.JTextField jtext_determina;
    private javax.swing.JTextField jtext_determina_nor;
    private javax.swing.JTextField jtext_multi;
    private javax.swing.JTextField jtext_relacion;
    private javax.swing.JTextField jtext_relacion_nor;
    private javax.swing.JLabel label;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label_errores;
    private javax.swing.JLabel label_errores_nor;
    private javax.swing.JTextArea textarea_nf1;
    private javax.swing.JTextArea textarea_nf2;
    private javax.swing.JTextArea textarea_nf3;
    // End of variables declaration//GEN-END:variables
}
